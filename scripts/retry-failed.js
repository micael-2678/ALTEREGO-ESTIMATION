#!/usr/bin/env node

/**
 * Script pour r√©-essayer l'ingestion DVF de d√©partements sp√©cifiques
 * Usage: node scripts/retry-failed.js 75 92 93
 */

import { ingestDVFDepartment } from '../lib/dvf-ingestion.js';
import { connectToDatabase } from '../lib/mongodb.js';

async function retryDepartments(departments) {
  if (departments.length === 0) {
    console.log('‚ùå Erreur : Aucun d√©partement sp√©cifi√©');
    console.log('Usage: node scripts/retry-failed.js 75 92 93');
    process.exit(1);
  }
  
  console.log('='.repeat(80));
  console.log('üîÑ R√âESSAI INGESTION DVF');
  console.log('='.repeat(80));
  console.log(`D√©partements √† traiter : ${departments.join(', ')}`);
  console.log('='.repeat(80));
  
  // Se connecter √† MongoDB
  await connectToDatabase();
  
  let successCount = 0;
  let failCount = 0;
  
  for (const dept of departments) {
    console.log('');
    console.log('-'.repeat(80));
    console.log(`D√©partement ${dept}`);
    console.log('-'.repeat(80));
    
    try {
      await ingestDVFDepartment(dept);
      successCount++;
      console.log(`‚úÖ D√©partement ${dept} : SUCC√àS`);
    } catch (error) {
      failCount++;
      console.error(`‚ùå D√©partement ${dept} : √âCHEC - ${error.message}`);
    }
    
    // Pause entre d√©partements
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('');
  console.log('='.repeat(80));
  console.log('üìä R√âSUM√â');
  console.log('='.repeat(80));
  console.log(`‚úÖ Succ√®s : ${successCount}`);
  console.log(`‚ùå √âchecs : ${failCount}`);
  console.log('='.repeat(80));
  
  process.exit(failCount > 0 ? 1 : 0);
}

// R√©cup√©rer les d√©partements depuis les arguments
const departments = process.argv.slice(2);
retryDepartments(departments).catch(error => {
  console.error('‚ùå ERREUR FATALE:', error);
  process.exit(1);
});
