#!/usr/bin/env node

/**
 * Script de diagnostic rapide pour v√©rifier l'√©tat de l'application en production
 * Usage: node scripts/check-production-status.js
 */

import { connectToDatabase, getCollection } from '../lib/mongodb.js';

const COLORS = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(color, icon, message) {
  console.log(`${color}${icon} ${message}${COLORS.reset}`);
}

async function checkProductionStatus() {
  console.log('\n' + '='.repeat(80));
  console.log('üîç DIAGNOSTIC ALTEREGO - PRODUCTION STATUS');
  console.log('='.repeat(80) + '\n');

  // 1. Variables d'environnement
  log(COLORS.cyan, 'üìã', 'VARIABLES D\'ENVIRONNEMENT');
  console.log('-'.repeat(80));
  
  const envVars = {
    'MONGO_URL': process.env.MONGO_URL || '‚ùå NON D√âFINI',
    'DB_NAME': process.env.DB_NAME || '‚ùå NON D√âFINI',
    'NEXT_PUBLIC_BASE_URL': process.env.NEXT_PUBLIC_BASE_URL || '‚ùå NON D√âFINI',
    'AUTO_LOAD_DVF': process.env.AUTO_LOAD_DVF || '‚ùå NON D√âFINI',
    'DVF_LOAD_MODE': process.env.DVF_LOAD_MODE || '‚ùå NON D√âFINI (d√©faut: complete)',
    'ADMIN_USERNAME': process.env.ADMIN_USERNAME ? '‚úÖ D√âFINI' : '‚ùå NON D√âFINI',
    'ADMIN_PASSWORD': process.env.ADMIN_PASSWORD ? '‚úÖ D√âFINI' : '‚ùå NON D√âFINI',
    'JWT_SECRET': process.env.JWT_SECRET ? '‚úÖ D√âFINI' : '‚ùå NON D√âFINI',
  };

  for (const [key, value] of Object.entries(envVars)) {
    const status = value.includes('‚ùå') ? COLORS.red : COLORS.green;
    console.log(`  ${status}${key}${COLORS.reset}: ${value}`);
  }

  // 2. Connexion MongoDB
  console.log('\n' + '-'.repeat(80));
  log(COLORS.cyan, 'üóÑÔ∏è', 'CONNEXION MONGODB');
  console.log('-'.repeat(80));

  try {
    await connectToDatabase();
    log(COLORS.green, '‚úÖ', 'Connexion MongoDB r√©ussie');
  } catch (error) {
    log(COLORS.red, '‚ùå', `Erreur de connexion MongoDB: ${error.message}`);
    process.exit(1);
  }

  // 3. Donn√©es DVF
  console.log('\n' + '-'.repeat(80));
  log(COLORS.cyan, 'üìä', 'DONN√âES DVF');
  console.log('-'.repeat(80));

  try {
    const collection = await getCollection('dvf_sales');
    const count = await collection.countDocuments();
    
    if (count === 0) {
      log(COLORS.red, '‚ùå', 'Base de donn√©es VIDE - Aucune transaction DVF');
      console.log(`  ${COLORS.yellow}üí° Solution:${COLORS.reset}`);
      console.log(`     1. V√©rifiez que AUTO_LOAD_DVF=true dans Dokploy`);
      console.log(`     2. Red√©ployez l'application`);
      console.log(`     3. OU ex√©cutez manuellement: node scripts/ingest-all-france.js`);
    } else if (count < 1000) {
      log(COLORS.yellow, '‚ö†Ô∏è', `Base de donn√©es INCOMPL√àTE - ${count} transactions`);
      console.log(`  ${COLORS.yellow}üí° Recommandation:${COLORS.reset} Chargez plus de donn√©es`);
    } else if (count < 100000) {
      log(COLORS.green, '‚úÖ', `Base de donn√©es OK - ${count.toLocaleString()} transactions`);
      console.log(`  ${COLORS.cyan}‚ÑπÔ∏è  Mode:${COLORS.reset} Donn√©es partielles (d√©veloppement)`);
    } else {
      log(COLORS.green, '‚úÖ', `Base de donn√©es EXCELLENTE - ${count.toLocaleString()} transactions`);
      console.log(`  ${COLORS.cyan}‚ÑπÔ∏è  Mode:${COLORS.reset} Production compl√®te`);
    }

    // Statistiques d√©taill√©es
    if (count > 0) {
      console.log('\n  üìà Statistiques:');
      
      // Par type
      const appartCount = await collection.countDocuments({ type_local: 'appartement' });
      const maisonCount = await collection.countDocuments({ type_local: 'maison' });
      console.log(`     - Appartements: ${appartCount.toLocaleString()}`);
      console.log(`     - Maisons: ${maisonCount.toLocaleString()}`);
      
      // Par d√©partement (top 5)
      console.log('\n  üó∫Ô∏è  Top 5 d√©partements:');
      const topDepts = await collection.aggregate([
        { $group: { _id: '$code_departement', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 5 }
      ]).toArray();
      
      for (const dept of topDepts) {
        console.log(`     - D√©partement ${dept._id}: ${dept.count.toLocaleString()} transactions`);
      }
      
      // Date la plus r√©cente
      const latest = await collection.findOne({}, { sort: { date_mutation: -1 } });
      if (latest) {
        console.log(`\n  üìÖ Transaction la plus r√©cente: ${latest.date_mutation}`);
      }
      
      // Index
      console.log('\n  üîç Index cr√©√©s:');
      const indexes = await collection.indexes();
      for (const index of indexes) {
        const keys = Object.keys(index.key).join(' + ');
        console.log(`     - ${keys}`);
      }
    }
  } catch (error) {
    log(COLORS.red, '‚ùå', `Erreur lors de la lecture des donn√©es: ${error.message}`);
  }

  // 4. Test API Estimation
  console.log('\n' + '-'.repeat(80));
  log(COLORS.cyan, 'üß™', 'TEST API ESTIMATION (Paris)');
  console.log('-'.repeat(80));

  try {
    const collection = await getCollection('dvf_sales');
    
    // Recherche de comparables √† Paris (48.8566, 2.3522)
    const testLat = 48.8566;
    const testLng = 2.3522;
    const radius = 500; // m√®tres
    
    const latDelta = radius / 111000;
    const lngDelta = radius / (111000 * Math.cos(testLat * Math.PI / 180));
    
    const comparables = await collection.find({
      latitude: { $gte: testLat - latDelta, $lte: testLat + latDelta },
      longitude: { $gte: testLng - lngDelta, $lte: testLng + lngDelta },
      type_local: 'appartement',
      surface_reelle_bati: { $gte: 50, $lte: 100 }
    }).limit(10).toArray();
    
    if (comparables.length > 0) {
      log(COLORS.green, '‚úÖ', `API fonctionnelle - ${comparables.length} comparables trouv√©s`);
      console.log(`  ${COLORS.cyan}‚ÑπÔ∏è  Zone test√©e:${COLORS.reset} Paris Centre (lat: ${testLat}, lng: ${testLng})`);
      console.log(`  ${COLORS.cyan}‚ÑπÔ∏è  Crit√®res:${COLORS.reset} Appartements 50-100m¬≤ dans 500m`);
      
      if (comparables.length >= 3) {
        const avgPrice = comparables.reduce((sum, c) => sum + c.prix_m2, 0) / comparables.length;
        console.log(`  ${COLORS.cyan}üìä Prix moyen:${COLORS.reset} ${Math.round(avgPrice).toLocaleString()} ‚Ç¨/m¬≤`);
      }
    } else {
      log(COLORS.yellow, '‚ö†Ô∏è', 'Aucun comparable trouv√© pour le test');
      console.log(`  ${COLORS.yellow}üí° Note:${COLORS.reset} Cela peut √™tre normal si vous n'avez charg√© que certains d√©partements`);
    }
  } catch (error) {
    log(COLORS.red, '‚ùå', `Erreur lors du test API: ${error.message}`);
  }

  // 5. V√©rification des leads
  console.log('\n' + '-'.repeat(80));
  log(COLORS.cyan, 'üìù', 'LEADS COLLECT√âS');
  console.log('-'.repeat(80));

  try {
    const leadsCollection = await getCollection('leads');
    const leadCount = await leadsCollection.countDocuments();
    
    if (leadCount > 0) {
      log(COLORS.green, '‚úÖ', `${leadCount} lead(s) collect√©(s)`);
      
      const statusGroups = await leadsCollection.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]).toArray();
      
      console.log('  üìä Par statut:');
      for (const group of statusGroups) {
        console.log(`     - ${group._id || 'nouveau'}: ${group.count}`);
      }
    } else {
      log(COLORS.yellow, '‚ö†Ô∏è', 'Aucun lead collect√© pour le moment');
    }
  } catch (error) {
    log(COLORS.yellow, '‚ö†Ô∏è', `Collection leads non initialis√©e (normal au premier d√©marrage)`);
  }

  // 6. R√©sum√© final
  console.log('\n' + '='.repeat(80));
  log(COLORS.blue, 'üìã', 'R√âSUM√â');
  console.log('='.repeat(80));

  const collection = await getCollection('dvf_sales');
  const dvfCount = await collection.countDocuments();
  
  if (dvfCount === 0) {
    log(COLORS.red, '‚ùå', 'APPLICATION NON FONCTIONNELLE');
    console.log(`\n  ${COLORS.yellow}üîß Actions requises:${COLORS.reset}`);
    console.log('     1. Configurez AUTO_LOAD_DVF=true dans Dokploy');
    console.log('     2. Choisissez DVF_LOAD_MODE=complete ou DVF_LOAD_MODE=quick');
    console.log('     3. Red√©ployez l\'application');
  } else if (dvfCount < 1000) {
    log(COLORS.yellow, '‚ö†Ô∏è', 'APPLICATION PARTIELLEMENT FONCTIONNELLE');
    console.log(`\n  ${COLORS.cyan}üí° Recommandation:${COLORS.reset} Chargez plus de donn√©es pour une meilleure couverture`);
  } else {
    log(COLORS.green, '‚úÖ', 'APPLICATION OP√âRATIONNELLE');
    console.log(`\n  ${COLORS.green}üéâ Tout est pr√™t !${COLORS.reset} Votre application est pr√™te pour la production.`);
  }

  console.log('\n' + '='.repeat(80));
  console.log('');

  process.exit(0);
}

// Ex√©cuter le diagnostic
checkProductionStatus().catch(error => {
  console.error('\n‚ùå ERREUR FATALE:', error);
  process.exit(1);
});
