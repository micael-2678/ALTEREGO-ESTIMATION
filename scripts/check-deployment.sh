#!/bin/bash

# Script de v√©rification pr√©-d√©ploiement pour AlterEgo
echo "üîç V√©rification Pr√©-D√©ploiement AlterEgo"
echo "========================================"
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
ERRORS=0
WARNINGS=0

# 1. V√©rifier Dockerfile
echo "üì¶ Dockerfile..."
if [ -f "Dockerfile" ]; then
    echo -e "${GREEN}‚úì${NC} Dockerfile pr√©sent"
else
    echo -e "${RED}‚úó${NC} Dockerfile manquant"
    ERRORS=$((ERRORS + 1))
fi

# 2. V√©rifier package.json
echo ""
echo "üìã package.json..."
if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úì${NC} package.json pr√©sent"
    
    # V√©rifier les scripts n√©cessaires
    if grep -q '"build"' package.json; then
        echo -e "${GREEN}‚úì${NC} Script 'build' trouv√©"
    else
        echo -e "${RED}‚úó${NC} Script 'build' manquant dans package.json"
        ERRORS=$((ERRORS + 1))
    fi
    
    if grep -q '"start"' package.json; then
        echo -e "${GREEN}‚úì${NC} Script 'start' trouv√©"
    else
        echo -e "${RED}‚úó${NC} Script 'start' manquant dans package.json"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${RED}‚úó${NC} package.json manquant"
    ERRORS=$((ERRORS + 1))
fi

# 3. V√©rifier lockfile
echo ""
echo "üîí Lockfile..."
if [ -f "yarn.lock" ]; then
    echo -e "${GREEN}‚úì${NC} yarn.lock pr√©sent"
elif [ -f "package-lock.json" ]; then
    echo -e "${GREEN}‚úì${NC} package-lock.json pr√©sent"
elif [ -f "pnpm-lock.yaml" ]; then
    echo -e "${GREEN}‚úì${NC} pnpm-lock.yaml pr√©sent"
else
    echo -e "${YELLOW}‚ö†${NC} Aucun lockfile trouv√© (yarn install sera utilis√©)"
    WARNINGS=$((WARNINGS + 1))
fi

# 4. V√©rifier .dockerignore
echo ""
echo "üö´ .dockerignore..."
if [ -f ".dockerignore" ]; then
    echo -e "${GREEN}‚úì${NC} .dockerignore pr√©sent"
else
    echo -e "${YELLOW}‚ö†${NC} .dockerignore manquant (recommand√©)"
    WARNINGS=$((WARNINGS + 1))
fi

# 5. V√©rifier .env.example
echo ""
echo "üîê Variables d'environnement..."
if [ -f ".env.example" ]; then
    echo -e "${GREEN}‚úì${NC} .env.example pr√©sent"
else
    echo -e "${YELLOW}‚ö†${NC} .env.example manquant (documentation recommand√©e)"
    WARNINGS=$((WARNINGS + 1))
fi

# 6. V√©rifier structure Next.js
echo ""
echo "‚öõÔ∏è  Structure Next.js..."
if [ -f "next.config.js" ] || [ -f "next.config.mjs" ]; then
    echo -e "${GREEN}‚úì${NC} Configuration Next.js pr√©sente"
else
    echo -e "${RED}‚úó${NC} next.config.js manquant"
    ERRORS=$((ERRORS + 1))
fi

if [ -d "app" ] || [ -d "pages" ]; then
    echo -e "${GREEN}‚úì${NC} R√©pertoire app/ ou pages/ pr√©sent"
else
    echo -e "${RED}‚úó${NC} Ni app/ ni pages/ trouv√©"
    ERRORS=$((ERRORS + 1))
fi

# 7. V√©rifier .gitignore
echo ""
echo "üìù .gitignore..."
if [ -f ".gitignore" ]; then
    echo -e "${GREEN}‚úì${NC} .gitignore pr√©sent"
    
    if grep -q "node_modules" .gitignore; then
        echo -e "${GREEN}‚úì${NC} node_modules est ignor√©"
    else
        echo -e "${YELLOW}‚ö†${NC} node_modules devrait √™tre dans .gitignore"
        WARNINGS=$((WARNINGS + 1))
    fi
    
    if grep -q ".env" .gitignore; then
        echo -e "${GREEN}‚úì${NC} .env est ignor√©"
    else
        echo -e "${RED}‚úó${NC} .env devrait √™tre dans .gitignore"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†${NC} .gitignore manquant"
    WARNINGS=$((WARNINGS + 1))
fi

# 8. V√©rifier taille du repo
echo ""
echo "üíæ Taille du projet..."
SIZE=$(du -sh . 2>/dev/null | cut -f1)
echo "   Taille totale: $SIZE"

# 9. Test build local (optionnel)
echo ""
echo "üèóÔ∏è  Test de build..."
echo -e "${YELLOW}‚Ñπ${NC} Pour tester le build localement: ${GREEN}yarn build${NC}"

# R√©sum√©
echo ""
echo "========================================"
echo "üìä R√©sum√©"
echo "========================================"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Pr√™t pour le d√©ploiement !${NC}"
    echo ""
    echo "üöÄ Prochaines √©tapes:"
    echo "   1. Commit et push sur GitHub"
    echo "   2. D√©ployer sur Dokploy"
    echo "   3. Configurer les variables d'environnement"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Pr√™t avec quelques avertissements${NC}"
    echo -e "   ${WARNINGS} avertissement(s)"
    echo ""
    echo "Vous pouvez d√©ployer, mais corrigez les avertissements pour optimiser."
    exit 0
else
    echo -e "${RED}‚ùå Corrections n√©cessaires avant le d√©ploiement${NC}"
    echo -e "   ${ERRORS} erreur(s)"
    echo -e "   ${WARNINGS} avertissement(s)"
    echo ""
    echo "Corrigez les erreurs avant de d√©ployer."
    exit 1
fi
